package br.com.guilhermevillaca.padroes.estruturais.decorator;

/*
 * Benef√≠cios do Padr√£o Decorator
‚úî C√≥digo flex√≠vel e modular ‚Üí Podemos adicionar novos ingredientes sem modificar as classes existentes.
‚úî Evita a explos√£o de subclasses ‚Üí N√£o precisamos criar v√°rias combina√ß√µes de caf√©.
‚úî Ordem din√¢mica ‚Üí Podemos decorar o caf√© em qualquer ordem.

Agora conseguimos montar qualquer tipo de caf√© sem precisar criar subclasses para cada varia√ß√£o
 */
// üöÄ Testando a solu√ß√£o correta
public class Principal {
    public static void main(String[] args) {
        // Caf√© simples
        Cafe cafe = new CafeSimples();
        System.out.println(cafe.getDescricao() + " = R$" + cafe.getPreco());

        // Caf√© com leite e a√ß√∫car
        Cafe cafeComLeiteAcucar = new Acucar(new Leite(new CafeSimples()));
        System.out.println(cafeComLeiteAcucar.getDescricao() + " = R$" + cafeComLeiteAcucar.getPreco());

        // Capuccino com canela e marshmallow
        Cafe capuccinoComCanelaMarshmallow = new Marshmallow(new Canela(new Capuccino(new CafeSimples())));
        System.out.println(capuccinoComCanelaMarshmallow.getDescricao() + " = R$" + capuccinoComCanelaMarshmallow.getPreco());

        // Caf√© com ado√ßante
        Cafe cafeComAdocante = new Adocante(new CafeSimples());
        System.out.println(cafeComAdocante.getDescricao() + " = R$" + cafeComAdocante.getPreco());
    }
}
