package br.com.guilhermevillaca.padroes.comportamentais.command;


/*
 * 
 * âœ… BenefÃ­cios do Command
âœ… Baixo acoplamento: Garcom nÃ£o depende diretamente de Cozinheiro, ele sÃ³ conhece a interface Pedido.
âœ… FÃ¡cil expansÃ£o: Para adicionar um novo prato, basta criar um novo comando. Nenhuma classe existente precisa ser alterada.
âœ… Melhor organizaÃ§Ã£o: SeparaÃ§Ã£o clara de responsabilidades entre quem faz o pedido, quem executa e quem recebe.
âœ… Flexibilidade: Podemos armazenar comandos em uma lista para desfazer/refazer aÃ§Ãµes no futuro.

Agora o cÃ³digo estÃ¡ organizado, escalÃ¡vel e pronto para novos pedidos! ğŸš€
 */
public class Principal {

    public static void main(String[] args) {
        Cozinheiro cozinheiro = new Cozinheiro();
        Pedido pizza = new PedidoPizza(cozinheiro);
        Pedido hamburguer = new PedidoHamburguer(cozinheiro);

        Garcom garcom = new Garcom();
        garcom.enviarPedido(pizza);
        garcom.enviarPedido(hamburguer);
    }

}
