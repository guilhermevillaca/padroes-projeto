package br.com.guilhermevillaca.padroes.comportamentais.chainofresponsability;

/**
 *
 * @author villaca
 *
 * padr√£o de projeto Chain of Responsibility √© utilizado quando voc√™ deseja
 * passar uma solicita√ß√£o ao longo de uma cadeia de manipuladores at√© que um
 * deles a processe. Cada manipulador na cadeia decide se processa a solicita√ß√£o
 * ou a passa para o pr√≥ximo manipulador. 
 * 
 * 
 * ‚úÖ Benef√≠cios do Chain of Responsibility
‚úÖ C√≥digo modular: Cada regra de valida√ß√£o √© uma classe separada.
‚úÖ F√°cil manuten√ß√£o: Para adicionar uma nova regra, basta criar um novo Handler e coloc√°-lo na cadeia.
‚úÖ Melhor reutiliza√ß√£o: Podemos reutilizar regras em outros contextos facilmente.
‚úÖ Flex√≠vel: Podemos mudar a ordem das verifica√ß√µes sem alterar cada m√©todo manualmente.

Agora o c√≥digo est√° limpo, organizado e pronto para futuras expans√µes! üöÄ
 */
public class Principal {
// Classe principal para testar
    public static void main(String[] args) {
        // Criando os handlers
        Handler validacao = new ValidacaoValorHandler();
        Handler saldo = new VerificarSaldoHandler();
        Handler limite = new VerificarLimiteHandler();
        Handler banco = new VerificarBancoHandler();
        Handler processador = new ProcessarPagamentoHandler();

        // Encadeando os handlers na ordem correta
        validacao.setProximo(saldo);
        saldo.setProximo(limite);
        limite.setProximo(banco);
        banco.setProximo(processador);

        // Testando o Chain of Responsibility
        System.out.println("Tentando processar pagamento de R$300 para Jo√£o:");
        validacao.processar("Jo√£o", 300);

        System.out.println("\nTentando processar pagamento de R$700 para Maria:");
        validacao.processar("Maria", 700);
    }
}